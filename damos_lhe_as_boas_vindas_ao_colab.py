# -*- coding: utf-8 -*-
"""Damos-lhe as boas-vindas ao Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# 📦 Importar bibliotecas
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import joblib

df = pd.read_csv("/dataset_safezone_rico.csv")  # certifique-se que o CSV está no mesmo diretório
print("Visualização inicial:")
print(df.head())

# 📍 Verificar distribuição por região
print("\nRegistros por região:")
print(df['regiao'].value_counts())

# 🔁 Codificar a variável categórica 'regiao'
df_encoded = pd.get_dummies(df, columns=['regiao'])
print("\nApós codificação:")
print(df_encoded.head())

# ✂️ Separar features e alvo
X = df_encoded.drop("alerta", axis=1)
y = df_encoded["alerta"]

# 🔀 Dividir entre treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 🧠 Treinamento do modelo
model = RandomForestClassifier()
model.fit(X_train, y_train)

# ✅ Avaliação do modelo
y_pred = model.predict(X_test)
print("\nMatriz de confusão:")
print(confusion_matrix(y_test, y_pred))

print("\nRelatório de classificação:")
print(classification_report(y_test, y_pred))

# 📈 Visualização dos dados
sns.boxplot(x="alerta", y="nivel_agua", data=df)
plt.title("Distribuição do Nível de Água por Alerta")
plt.show()

sns.countplot(x="regiao", hue="alerta", data=df)
plt.title("Alertas por Região")
plt.xticks(rotation=45)
plt.show()

# 💾 Exportar o modelo treinado
joblib.dump(model, "modelo_safezone.pkl")
print("\nModelo salvo como 'modelo_safezone.pkl'")

# 🤖 Previsão personalizada com cenários
print("\n🔍 Previsão personalizada por cenário:")
cenarios = {
    "1": {"temperatura": 30, "umidade": 45, "nivel_agua": 20, "descricao": "Céu limpo, clima seco"},
    "2": {"temperatura": 26, "umidade": 70, "nivel_agua": 50, "descricao": "Chuva moderada"},
    "3": {"temperatura": 24, "umidade": 90, "nivel_agua": 85, "descricao": "Chuva forte, nível elevado"}
}

print("Cenários disponíveis:")
for k, v in cenarios.items():
    print(f"{k} - {v['descricao']}")

opcao = input("Escolha o número do cenário desejado: ")

regioes_possiveis = ['Centro', 'Zona Norte', 'Zona Sul', 'Zona Leste', 'Zona Oeste', 'Interior', 'Litoral']
regiao_input = input("Informe sua região (exatamente como: Centro, Zona Norte, etc): ")

if opcao not in cenarios or regiao_input not in regioes_possiveis:
    print("❌ Opção ou região inválida.")
else:
    dados = cenarios[opcao]

    dados_usuario = {
        'temperatura': dados['temperatura'],
        'umidade': dados['umidade'],
        'nivel_agua': dados['nivel_agua']
    }

    for reg in regioes_possiveis:
        dados_usuario[f'regiao_{reg}'] = 1 if reg == regiao_input else 0

    df_usuario = pd.DataFrame([dados_usuario])
    df_usuario = df_usuario[X.columns]
    resultado = model.predict(df_usuario)[0]


    print(f"\n📍 Região: {regiao_input}")
print(f"🌡️ Temperatura: entre {dados['temperatura'] - 1}°C e {dados['temperatura'] + 1}°C")
print(f"💧 Umidade: entre {dados['umidade'] - 5}% e {dados['umidade'] + 5}%")
print(f"🌊 Nível de água: entre {dados['nivel_agua'] - 5} e {dados['nivel_agua'] + 5}")

if resultado == 1:
    print("🚨 ALERTA: Há risco elevado de enchente na sua região!")
else:
    print("✅ Situação segura: Nenhum risco elevado identificado no momento.")